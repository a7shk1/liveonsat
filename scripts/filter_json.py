# scripts/filter_json.py
import json
from pathlib import Path

# --- ุงูุฅุนุฏุงุฏุงุช ุงูุฃุณุงุณูุฉ ---
REPO_ROOT = Path(__file__).resolve().parents[1]
MATCHES_DIR = REPO_ROOT / "matches"
INPUT_PATH = MATCHES_DIR / "liveonsat_raw.json"
OUTPUT_PATH = MATCHES_DIR / "filtered_matches.json"


# --- โจ ุงููุงุฆูุฉ ุงููุงููุฉ ูุงููุญุฏุซุฉ ุจูุงุกู ุนูู ุทูุจู โจ ---
LEAGUE_KEYWORDS = [
    # ุงูุฏูุฑูุงุช ุงูุฎูุณุฉ ุงููุจุฑู
    "Premier League",      # ุงูุฏูุฑู ุงูุฅูุฌููุฒู
    "La Liga",             # ุงูุฏูุฑู ุงูุฅุณุจุงูู
    "Serie A",             # ุงูุฏูุฑู ุงูุฅูุทุงูู
    "Bundesliga",          # ุงูุฏูุฑู ุงูุฃููุงูู
    "Ligue 1",             # ุงูุฏูุฑู ุงููุฑูุณู

    # ูุคูุณ ุฅูุฌูุชุฑุง
    "FA Cup",              # ูุฃุณ ุงูุงุชุญุงุฏ ุงูุฅูุฌููุฒู
    "Carabao Cup",         # ูุฃุณ ุงูุฑุงุจุทุฉ (ูุงุฑุงุจุงู)
    "EFL Cup",             # ุงุณู ุขุฎุฑ ููุฃุณ ุงูุฑุงุจุทุฉ
    "Community Shield",    # ุงูุฏุฑุน ุงูุฎูุฑูุฉ

    # ูุคูุณ ุฅุณุจุงููุง
    "Copa del Rey",        # ูุฃุณ ููู ุฅุณุจุงููุง
    "Supercopa",           # ูุฃุณ ุงูุณูุจุฑ ุงูุฅุณุจุงูู

    # ูุคูุณ ุฅูุทุงููุง
    "Coppa Italia",        # ูุฃุณ ุฅูุทุงููุง
    "Supercoppa Italiana", # ูุฃุณ ุงูุณูุจุฑ ุงูุฅูุทุงูู

    # ูุคูุณ ุฃููุงููุง
    "DFB-Pokal",           # ูุฃุณ ุฃููุงููุง
    "DFL-Supercup",        # ูุฃุณ ุงูุณูุจุฑ ุงูุฃููุงูู

    # ูุคูุณ ูุฑูุณุง
    "Coupe de France",     # ูุฃุณ ูุฑูุณุง
    "Trophรฉe des Champions",# ูุฃุณ ุงูุฃุจุทุงู ุงููุฑูุณู (ุงูุณูุจุฑ)

    # ุงูุจุทููุงุช ุงููุงุฑูุฉ ููุฃูุฏูุฉ
    "Champions League",    # ุฏูุฑู ุฃุจุทุงู ุฃูุฑูุจุง
    "Europa League",       # ุงูุฏูุฑู ุงูุฃูุฑูุจู
    "Conference League",   # ุฏูุฑู ุงููุคุชูุฑ ุงูุฃูุฑูุจู
    "Club World Cup",      # ูุฃุณ ุงูุนุงูู ููุฃูุฏูุฉ

    # ุจุทููุงุช ุงูููุชุฎุจุงุช ุงูุฏูููุฉ
    "World Cup",           # ูุฃุณ ุงูุนุงูู (ูุดูู ุงูุชุตููุงุช ูุงูููุญู)
    "WC Qualifier",        # ุทุฑููุฉ ุฃุฎุฑู ููุชุงุจุฉ ุชุตููุงุช ุงููููุฏูุงู
    "UEFA Euro",           # ุจุทููุฉ ุฃูู ุฃูุฑูุจุง (ุงูููุฑู)
    "Copa America",        # ููุจุง ุฃูุฑููุง
    "Africa Cup of Nations",# ูุฃุณ ุงูุฃูู ุงูุฃูุฑูููุฉ
    "AFCON",               # ุงุฎุชุตุงุฑ ูุฃุณ ุงูุฃูู ุงูุฃูุฑูููุฉ
    "AFC Asian Cup",       # ูุฃุณ ุขุณูุง
    "Nations League",      # ุฏูุฑู ุงูุฃูู ุงูุฃูุฑูุจูุฉ
    "Arab Cup",            # ูุฃุณ ุงูุนุฑุจ
]


def filter_matches_by_league():
    """
    ุชูุฑุฃ ููู ุงูุฌูุณูู ุงูุฎุงูุ ุชููุชุฑ ุงููุจุงุฑูุงุช ุญุณุจ ุงููููุงุช ุงูููุชุงุญูุฉ ููุฏูุฑูุงุชุ
    ูุชุญูุธ ุงููุชุงุฆุฌ ูู ููู ุฌูุณูู ุฌุฏูุฏ.
    """
    print("--- Starting Match Filtering Process ---")
    
    try:
        print(f"Reading raw data from: {INPUT_PATH}")
        with INPUT_PATH.open("r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"โ ERROR: Input file not found! Please run the scraping script first.")
        return
    except json.JSONDecodeError:
        print(f"โ ERROR: Could not read the JSON file. It might be empty or corrupted.")
        return

    all_matches = data.get("matches", [])
    if not all_matches:
        print("๐ก WARNING: The input file contains no matches to filter.")
        return
        
    print(f"Found {len(all_matches)} total matches to check.")

    filtered_list = []
    print("\nFiltering for leagues containing:")
    for keyword in LEAGUE_KEYWORDS:
        print(f"- {keyword}")

    for match in all_matches:
        # โจ ุงูุชุตุญูุญ 1: ููุฑุฃ ุงุณู ุงูุจุทููุฉ ูู ุญูู "competition"
        competition = match.get("competition", "")
        if not competition:
            continue

        for keyword in LEAGUE_KEYWORDS:
            # โจ ุงูุชุตุญูุญ 2: ููุงุฑู ุงููููุฉ ุงูููุชุงุญูุฉ ูุน ุญูู ุงูุจุทููุฉ ูููุณ ุนููุงู ุงููุจุงุฑุงุฉ
            if keyword.lower() in competition.lower():
                filtered_list.append(match)
                break
    
    print(f"\nโ Filtering complete. Kept {len(filtered_list)} matches.")

    output_data = {
        "date": data.get("date"),
        "source_url": data.get("source_url"),
        "filtered_by_keywords": LEAGUE_KEYWORDS,
        "matches": filtered_list,
    }

    with OUTPUT_PATH.open("w", encoding="utf-8") as f:
        json.dump(output_data, f, ensure_ascii=False, indent=2)

    print(f"โ๏ธ Successfully saved filtered matches to: {OUTPUT_PATH}")
    print("--- Process Finished ---")


if __name__ == "__main__":
    filter_matches_by_league()
